//modal animation
.ModalOpen {
    opacity: 1;
    transform: translateY(0);
}

.ModalClosed {
    opacity: 0;
    transform: translateY(-100%);
}

//to specify the animation timing

.ModalOpen {
    animation: openModal 0.4s ease-out forwards;
}

.ModalClosed {
    animation: closeModal 0.4s ease-out forwards;
}

@keyframes openModal {
    0% {
        opacity: 0;
        transform: translateY(-100%);
    }
    50% {
        opacity: 1;
        transform: translateY(20%);
    }
    100% {
        opacity: 1;
        transform: translateY(0%);
    }
}

@keyframes closeModal {
    0% {
        opacity: 1;
        transform: translateY(0%);
    }
    50% {
        opacity: 0.8;
        transform: translateY(60%);
    }
    100% {
        opacity: 0;
        transform: translateY(-100%);
    }
}


//react transition group:
npm i react-transition-group

<Transition
    in={this.state.showBlock}
    timeout={1000}
    mountOnEnter
    unmountOnExit
>
    {(state) => (
    <div
        style={{
        backgroundColor: "red",
        width: 100,
        height: 100,
        margin: "auto",
        transition: "opacity 1s ease-out",
        opacity: state === "exiting" ? 0 : 1,
        }}
    />
    )}
</Transition>
by setting this in property, this decides whether the elements wrapped inside should be shown or not
and the transition component manages 4 internal states:
Entering, Entered, Exiting, Exited

const animationTiming = {
  enter: 400,
  exit: 1000,
};
you can pass this object to timeout property to specify different entering and exiting time duration


// there are able to execute a function at these time intervals by passing these props
onEnter={() => console.log("onEnter")}
onEntering={() => console.log("onEntering")}
onEntered={() => console.log("onEntered")}
onExit={() => console.log("onExit")}
onExiting={() => console.log("onExiting")}
onExited={() => console.log("onExited")}


replacement of Transition could be CSSTransition

import CSSTransition from "react-transition-group/CSSTransition";
<CSSTransition
    mountOnEnter
    unmountOnExit
    in={props.show}
    timeout={animationTiming}
    classNames="fade-slide"
>
    <div className="Modal">
    <h1>A Modal</h1>
    <button className="Button" onClick={props.closed}>
        Dismiss
    </button>
    </div>
</CSSTransition>
// the below classes will be given to the parent element(<div className="Modal">)
.fade-slide-enter {
}

.fade-slide-enter-active {
  animation: openModal 0.4s ease-out forwards;
}

.fade-slide-exit {
}

.fade-slide-exit-active {
  animation: closeModal 1s ease-out forwards;
}

for css transition we can define out own classes rather than these automatically generated classes
classNames property can accept this object
classNames={{
    enter: "",
    enterActive: "ModalOpen",
    exit: "",
    exitActive: "ModalClosed",
    appear: "", //if the elemenet is rendered for the first time to the dom
    appearActive: "", //if the elemenet is rendered for the first time to the dom
}}