wrapping the component with div could break your styles sometimes, event if it doesn't then it could cause js to have some extra work
Fragments will always works as a soln but you can also use <> </> syntax as a shortcut
but this depends on your project set up because your build workflow needs to support this

portals

go to the index.html file and add a div with id="backdrop-root"
import React from "react";
import ReactDOM from "react-dom";

import Card from "./Card";
import Button from "./Button";
import classes from "./ErrorModal.module.css";

const Backdrop = (props) => {
  return <div className={classes.backdrop} onClick={props.onConfirm} />;
};
const ModalOverlay = (props) => {
  return (
    <Card className={classes.modal}>
      <header className={classes.header}>
        <h2>{props.title}</h2>
      </header>
      <div className={classes.content}>
        <p>{props.message}</p>
      </div>
      <footer className={classes.actions}>
        <Button onClick={props.onConfirm}>Okay</Button>
      </footer>
    </Card>
  );
};

const ErrorModal = (props) => {
  return (
    <React.Fragment>
      {ReactDOM.createPortal(
        <Backdrop onConfirm={props.onConfirm} />,
        document.getElementById("backdrop-root")
      )}
      {ReactDOM.createPortal(
        <ModalOverlay
          title={props.title}
          message={props.message}
          onConfirm={props.onConfirm}
        />,
        document.getElementById("overlay-root")
      )}
    </React.Fragment>
  );
};

export default ErrorModal;


//Ref
we can initialize it as well but in the tutorial we didn't need to
const nameInputRef = useRef();
and for the input add the prop, ref={nameInputRef}
//on submit
console.log(nameInputRef.current.value);
//to reset the values, here it is ok to manipulate the dom
nameInputRef.current.value = '';

for inputs using refs we call them uncontrolled components
we are letting the user enter his values and we are getting the values by accessing the dom
we are not controlling these elements with a state, we are not letting react have control over the elements
but rather we are using the default behavior of the input fields