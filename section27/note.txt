let people: {
    name: string;
    age: string;
}[];

type inference:
let course = 'React'; // no need to set : string because this will be redundant since typescript will assign this by default because it is initialized as a string

type alias
type Person = {
    name: string;
    age: number;
}

//functions and types
function add (a: number, b: number): number {
    return a + b;
}

// Generics
// it helps typescript to pick types when we want the returned type to be recognized but we also want to make the fn flexible to accept both string and integer
function insertAtBeginning<T>(array: T[], value: T) {
  const newArray = [value, ...array];
  return newArray;
}
let numbers: Array<number> = [1, 2, 3];
let numbers: number[] = [1, 2, 3]; //this 1 is a syntactic sugar

//add when creating a new project --template typescript

//to add types and keep children property that react provides to us
const Todos: React.FC<{ items: string[] }> = (props) => {
  return (
    <ul>
      {props.items.map((item) => (
        <li key={item}>{item}</li>
      ))}
    </ul>
  );
};

***//todos is a class used as a type;

const submitHandler = (event: React.FormEvent) => {//typescript onSubmit //MouseEvent

}

//ref
useRef<HTMLInputElement>(null)
if you visit  //mdn input you will find somewhere
Since every <input> element, regardless of type, is based on the HTMLInputElement interface