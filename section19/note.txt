sideEffects, async tasks & redux
we can either add such code in the components
or we create something which is called action creator

where to put the logic:
we often have the choice between fat reducers, fat components, or fat actions
for synchronous code
it is better to add logic bl reducers and not add it all in the component

for async code you should prefer action creators or components and never use reducers

for sync code: we can listen for a change from redux in the component and send the request to firebase bl useEffect





//action creator thunk
//app.js
dispatch(sendCartData(cart));


export const sendCartData = (cart) => {
  // return { type: "", payload: "..." };
  return async (dispatch) => {
    dispatch(
      uiActions.showNotification({
        status: "pending",
        title: "Sending...",
        message: "Sending cart data!",
      })
    );

    const sendRequest = async () => {
      const response = await fetch(
        "https://react-http-22038-default-rtdb.firebaseio.com/cart.json",
        {
          method: "PUT", //we override the existing cart
          body: JSON.stringify(cart),
        }
      );

      if (!response.ok) {
        throw new Error("Sending cart data failed.");
      }
    };

    try {
      await sendRequest();
      dispatch(
        uiActions.showNotification({
          status: "success",
          title: "Success!",
          message: "Sent cart data successfully!",
        })
      );
    } catch (error) {
      dispatch(
        uiActions.showNotification({
          status: "error",
          title: "Error!",
          message: "Sending cart data faield!",
        })
      );
    }
  };
};
