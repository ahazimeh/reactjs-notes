useEffect(() => {
    setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6)
}, [enteredEmail, enteredPassword])
//as a rule you add as depencies what you are using in the side effect fn

debouncing means to for example not check for input validity on every key stroke, but wait till user stops typing

//cleanup after useEffect
useEffect(() => {
    const identifier = setTimeout(() => {
      console.log("a");
    }, 500);
    return () => {
      clearTimeout(identifier);
    };
  }, [enteredUsername]);

//useReducer
const emailReducer = (state, action) => {
  if (action.type === "USER_INPUT") {
    return { value: action.val, isValid: action.val.includes("@") };
  }
  if (action.type === "INPUT_BLUR") {
    return { value: state.value, isValid: state.value.includes("@") };
  }
  return { value: "", isValid: false };
};
const [emailState, dispatchEmail] = useReducer(emailReducer, {
    value: "",
    isValid: null,
  });

dispatchEmail({ type: "USER_INPUT", val: event.target.value });

//to not call useEffect too often but only when some state you can above it do this
const { isValid: emailIsValid } = emailState;
const { isValid: passwordIsValid } = passwordState;
and now rather than adding emailState and passwordState as dependencies we just add emailIsValid passwordIsValid
note that isValid is element in the emailState and passwordState

react context
make a folder next to App.js(can be called state, store, context...)
file inside it called auth-context.js

to listen for a context we either use auth context consumer or by using a react hook